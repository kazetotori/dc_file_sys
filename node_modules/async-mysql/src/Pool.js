//Pool
"use strict";

const mysql = require('mysql');
const MysqlConfig = require('./config');
const Connection = require('./Connection');
const symbols = {
    oriPool: Symbol('originPool'),
    isAlive: Symbol('isAlive')
}




class PoolConnection extends Connection {
    constructor(conn) {
        super(conn, true);
    }

    async release() {
        return this.originConnection.release();
    }
}




class Pool {
    get config() { return this[symbols.oriPool].config }
    get isAlive() { return this[symbols.isAlive] }


    /** 
     * Constructor
     * @param {MysqlPool|MysqlConfig|Object|String} config
     */
    constructor(config) {
        this[symbols.oriPool] = config.getConnection ? config : mysql.createPool(config);
        this[symbols.isAlive] = true;
    }


    /**
     * The origin pool's function "on"'s proxy function.
     * @param {String} evtName the name of the listened event.
     * @param {Function} listner the callback excuted when the event triggered.
     */
    on(evtName, listener) {
        let pool = this[symbols.oriPool];
        return conn.on.apply(pool, arguments);
    }


    /**
     * Get a connection from the pool.
     * @return {Promise<Connection>}
     */
    async getConn() {
        return new Promise((resolve, reject) => {
            this[symbols.oriPool].getConnection((err, conn) => {
                if (err) reject(err)
                else resolve(new PoolConnection(conn));
            })
        });
    }


    /**
     * Ternimate the pool. This function would ternimate the pool after all of queries being complete.
     */
    async end() {
        return new Promise((resolve, reject) => {
            this[$originPool].end((err) => {
                if (err)
                    return reject(err);
                this[$isAlive] = false;
                resolve();
            })
        });
    }


    /**
    * Use a connection to query a sql command with parameters.
    * @param {String} cmd The sql command would be executed.
    * @param {Array} params Parameters.
    * @return {Promise<any>} 
    */
    async query(cmd, params) {
        let conn = await this.getConn();
        let result = await conn.query.apply(conn, arguments);
        return result;
    }
}









//output
module.exports.default = module.exports = Pool;