//The config templete

"use strict";

const symbols = {
    host: Symbol('host'),
    localAddr: Symbol('localAddress'),
    socketPath: Symbol('socketPath'),
    user: Symbol('user'),
    password: Symbol('password'),
    database: Symbol('database'),
    charset: Symbol('charset'),
    timezone: Symbol('timezone'),
    port: Symbol('port'),
    connectTimeout: Symbol('connectTimeout'),
    stringifyObjects: Symbol('stringifyObjects'),
    insecureAuth: Symbol('insecureAuth'),
    typeCast: Symbol('typeCast'),
    queryFormat: Symbol('queryFormat'),
    supportBigNumbers: Symbol('supportBigNumbers'),
    bigNumberStrings: Symbol('bigNumberStrings'),
    dateStrings: Symbol('dateStrings'),
    debug: Symbol('debug'),
    trace: Symbol('trace'),
    multipleStatements: Symbol('multipleStatements'),
    flags: Symbol('flags'),
    ssl: Symbol('ssl')
}
const options = Object.keys(symbols);




class Config {
    constructor(config) {
        let k;
        let symb;
        for (k in config) {
            if (options.indexOf(k) === -1)
                continue;
            symb = symbols[k];
            this[symb] = config[k];
        }
    }


    get host() { return this[symbols.host] }
    get localAddress() { return this[symbols.localAddr] }
    get socketPath() { return this[symbols.socketPath] }
    get user() { return this[symbols.user] }
    get password() { return this[symbols.password] }
    get database() { return this[symbols.database] }
    get charset() { return this[symbols.charset] }
    get timezone() { return this[symbols.timezone] }
    get port() { return this[symbols.port] }
    get connectTimeout() { return this[symbols.connectTimeout] }
    get stringifyObjects() { return this[symbols.stringifyObjects] }
    get insecureAuth() { return this[symbols.insecureAuth] }
    get typeCast() { return this[symbols.typeCast] }
    get queryFormat() { return this[symbols.queryFormat] }
    get supportBigNumbers() { return this[symbols.supportBigNumbers] }
    get bigNumberStrings() { return this[symbols.bigNumberStrings] }
    get dateStrings() { return this[symbols.dateStrings] }
    get debug() { return this[symbols.debug] }
    get trace() { return this[symbols.trace] }
    get multipleStatements() { return this[symbols.multipleStatements] }
    get flags() { return this[symbols.flags] }
    get ssl() { return this[symbols.ssl] }
}









//output
module.exports.default = module.exports = Config;
module.exports.options = options;